//
//  PHGroupChatHomeViewController.m
//  PocketHealth
//
//  Created by macmini on 15-1-6.
//  Copyright (c) 2015年 YiLiao. All rights reserved.
//

#import "PHGroupChatHomeViewController.h"

#import "PHAppStartManager.h"
#import "AppDelegate.h"

//界面
#import "GroupIndexTableViewCell.h"
#import "CalculateViewFrame.h"
#import "PHChatHomeAddDetailIndexViewController.h"
#import "PrivateChatViewViewController.h"

#import "GroupHelperIndexViewController.h"

//功能型
#import "Reachability.h"
#import "ClientHelper.h"

//数据型
#import "Member.h"
#import "SFirendDB.h"

#import "SNotificationMessage.h"
#import "NotificationMessage.h"

#import "OneForOneMessage.h"
#import "SOneForOneMessageDB.h"
#import "SGroupDB.h"
#import "SGroupMessageDB.h"

#import "HospitalAggregation.h"
#import "GroupHelpAggregation.h"
//http数据转换到数据库处理类
#import "PHChatDatabaseHelper.h"
//数据通讯
#import "PHGroupHttpRequest.h"

static NSString *connectStr = @"正在连接...";
static ConnectState connectState = isDisConnect;
static NSString *identifierGroupMainCell = @"PHGroupTableViewCell";
@interface PHGroupChatHomeViewController ()<UITableViewDataSource,UITableViewDelegate>
{
    Member *host;
    
    Reachability *internetReach;
}
@end

@implementation PHGroupChatHomeViewController
#pragma mark - view 生命周期
- (void)viewDidLoad {
    [super viewDidLoad];
    
    //———————————————————————————————————— 数据部分初始化 (标号相同为可并行  ———————————————————————
    //1.获取当前用户
    [self createHost];
    //1.后台请求自己的群信息 同步群信息
    [self performSelectorInBackground:@selector(selectMyGroupWithServer) withObject:nil];
    //1.后台请求自己的好友信息 同步好友信息
    [self performSelectorInBackground:@selector(selectMyFirendWithServer) withObject:nil];
    //1.创建socket数据分发消息通知
    [self createSocketChatNotification];
    //1.查询网络状态
    internetReach= [Reachability reachabilityWithHostName:@"www.baidu.com"];
    [internetReach startNotifier];
    //2.查询网络状态的通知
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(netWorkReachabe:) name:kReachabilityChangedNotification object:nil];
    
    
    //————————————————————————————————————— 界面部分初始化
    //1.创建tableview
    _tableView = [[UITableView alloc] init];
    _tableView.delegate = self;
    _tableView.dataSource = self;
    CGRect frame = [CalculateViewFrame viewFrame:self.navigationController withTabBarController:self.tabBarController];
    _tableView.frame = frame;
    
    
    [_tableView registerNib:[UINib nibWithNibName:@"GroupIndexTableViewCell" bundle:nil] forCellReuseIdentifier:identifierGroupMainCell];
    
    //2.创建table数据源
//    [self createPHGroupChatTableViewDataSourceMainArray];
    [self.view addSubview:_tableView];
    //1.创建右上角添加动作按钮
    UIBarButtonItem *phChatRightTopAddBarBtnItem = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(phChatRightTopAddBarBtnItemClick)];
    self.tabBarController.navigationItem.rightBarButtonItem = phChatRightTopAddBarBtnItem;
    
    
    
    //设置导航条背景颜色
    //
    // Do any additional setup after loading the view.
}
-(void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    [self.navigationController setNavigationBarHidden:NO];
    [self.navigationController.navigationBar setTranslucent:NO];
    self.tabBarController.title = @"健康吧";
    self.navigationController.navigationBar.translucent = NO;

    [self createPHGroupChatTableViewDataSourceMainArray];
}
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark -
#pragma mark - createMemberHost
#pragma mark -
-(void)createHost{
   host =  [[PHAppStartManager defaultManager] userHost];
}
#pragma mark -  每次启动到这里 查询自己加入的群 更新群信息（不包括群成员）
-(void)selectMyGroupWithServer{
    [PHGroupHttpRequest requestSelfGroupLsitDone:^(AFHTTPRequestOperation *operation, id responseObject) {
        //
        NSLog(@"%@",responseObject);
        [PHChatDatabaseHelper saveMyGroupListToDb:responseObject];
    } error:^(AFHTTPRequestOperation *operation, NSError *error) {
        //
    }];
}
#pragma mark - 查询自己的好友 全部（包括医生）
-(void)selectMyFirendWithServer{
    //
    [PHGroupHttpRequest requestUserFirendListWithType:MemberFriendTypeAll done:^(AFHTTPRequestOperation *operation, id responseObject) {
        //
        NSLog(@"%@",responseObject);
        //将数据添加到数据库中
        [PHChatDatabaseHelper saveMyAllFriendListToDb:responseObject];

    } error:^(AFHTTPRequestOperation *operation, NSError *error) {
        //
    }];
}
#pragma mark - 创建socket数据分发消息通知
-(void)createSocketChatNotification{
    //    DBTOUIJOINCHATORGROUPINFO
//    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(updateJoinInfoModel:) name:@"DBTOUIJOINCHATORGROUPINFO" object:nil];
    //DBTOUIGROUPMESSAGETEXT
    //刷新下界面
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(updateGroupAttentionMessageModel) name:@"DBTOUIGROUPMESSAGETEXT" object:nil];
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(updatePrivateMessageModel:) name:@"DBTOUIPRIVATEMESSAGETEXT" object:nil];
    //刷新自己的群通知
//    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(refreshSelfGroupList) name:@"REFRESHMYGROUPLSITFROMSERVER" object:nil];
}
#pragma mark - 消息分发处理 私聊处理
-(void)updatePrivateMessageModel:(id)object{
    NSLog(@"聊天主界面接受到 socket分发类 私聊消息 通知,进行界面更新");
    NSLog(@"updatePrivateMessageModel is %@",object);
    
    OneForOneMessage *pMeseeage = (OneForOneMessage *)((NSNotification *)object).object;
    //1. 在 chatFriendList 找到该消息的聊天人
    Member *tmpMember = [self searchMemberInChatFriendListByMemberId:pMeseeage.memberId];
    
    //1-1 如果不存在这个对象 那么从数据库中获取
    if (tmpMember == nil) {
        tmpMember = [self searchMemberInFriendDBByMemberId:pMeseeage.memberId];
        //1-2 如果数据库中也没有 直接报错
        if (tmpMember==nil)NSLog(@" error! : firendDB has no the mesaage member!!! ");
        
        
        
    }
    //2 member 已存在
    //2-1 判断member 是否显示在界面上
    /**
     *  这边有3 种情况
     1.当前界面就是聊天界面 isSession=1 && isCurrentPresentView=YES && chatVC != nil
     2.当前界面在主要的聊天列表界面 未含有该私聊 isSession=0
     3. 当前界面在主要的聊天列表界面 含有该私聊 isSession=1 isCurrentPresentView=NO
     */
    if (tmpMember.isSession == 0) {
        [CommonUtil playMessageComeNotify];
        tmpMember.isSession = 1;
        tmpMember.sessionDate = pMeseeage.time;
        SFirendDB *frienddb = [[SFirendDB alloc] init];
        [frienddb mergeWithUser:tmpMember WithBelongUid:host.memberId];
        //        [frienddb close];
        
        //加入消息数组
        [tmpMember.messageArr addObject:pMeseeage];
        tmpMember.messageNotReadCount++;
        host.messageNotReadCount++;
        
        //插入到聊天列表中
        [self.PHGroupChatTableViewDataSourceMainArray insertObject:tmpMember atIndex:0];
        //        SMessageDB *msgdb = [[SMessageDB alloc] init];
        //        [msgdb saveMessage:message WithUid:fromMember.memberId WithContactUid:host.memberId];
        //        [msgdb close];
    }
    else
    {
        tmpMember.sessionDate = pMeseeage.time;
        if (tmpMember.chatVC != nil) {
            if([tmpMember.chatVC isCurrentPresentView])
            {
                pMeseeage.readState = MessageRead;
                
            }else{
                [CommonUtil playMessageComeNotify];
                tmpMember.messageNotReadCount++;
                host.messageNotReadCount++;
            }
            [tmpMember.chatVC addMessage:pMeseeage];
        }else{
            [CommonUtil playMessageComeNotify];
            tmpMember.isSession = 1;
            SFirendDB *frienddb = [[SFirendDB alloc] init];
            [frienddb mergeWithUser:tmpMember WithBelongUid:host.memberId];
            //                [frienddb close];
            [tmpMember.messageArr addObject:pMeseeage];
            tmpMember.messageNotReadCount++;
            host.messageNotReadCount++;
            //                SMessageDB *msgdb = [[SMessageDB alloc] init];
            //                [msgdb saveMessage:message WithUid:fromMember.memberId WithContactUid:host.memberId];
            //                [msgdb close];
        }
    }

    [self performSelectorOnMainThread:@selector(groupHomeTableViewReloadData) withObject:nil waitUntilDone:NO];
}
-(Member *)searchMemberInFriendDBByMemberId:(long long)memberId
{
    SFirendDB *frienddb = [[SFirendDB alloc] init];
    Member *member = [frienddb selectUserWithUid:memberId WithBelongUid:host.memberId];
    //    [frienddb close];
    return member;
}
-(Member *)searchMemberInChatFriendListByMemberId:(long long)memberId
{
    NSInteger i = 0;
    Member *temp = nil;
    for (id m in self.PHGroupChatTableViewDataSourceMainArray) {
        if ([m isKindOfClass:[Member class]]) {
            Member *current = (Member *)m;
            if (memberId == current.memberId) {
                temp = current;
                break;
            }
        }
        i++;
    }
    return temp;
}
#pragma mark - 群聊聚合刷新界面
-(void)updateGroupAttentionMessageModel{
    [self performSelector:@selector(createPHGroupChatTableViewDataSourceMainArray) withObject:nil];
}

#pragma mark - 断线重连
-(void)netWorkReachabe:(NSNotification *)noti{
    
    Reachability *currReach=[noti object];
    NetworkStatus netStatus = [currReach currentReachabilityStatus];
    
    BOOL isNetwork = YES;
    
    switch (netStatus) {
        case  NotReachable:
            //没有网络
            [ClientHelper close];
            connectState=isDisConnect;
            
            break;
        case ReachableViaWWAN:
            //使用3g网络
            //            [ClientHelper connectToHost];
            [self performSelectorInBackground:@selector(reConnectChatHost) withObject:nil];
            connectState=isConnected;
            isNetwork = NO;
            break;
        case ReachableViaWiFi:
            //使用wifi网络
            //            [ClientHelper connectToHost];
            [self performSelectorInBackground:@selector(reConnectChatHost) withObject:nil];
            connectState=isConnected;
            isNetwork = NO;
            
            break;
            
        default:
            connectState=isTimeOut;
            break;
    }
    [self navigationBatTitleSetting];
}
-(void)reConnectChatHost{
    [ClientHelper connectToHost];
}
-(void)navigationBatTitleSetting
{
    if (connectState == isConnected) {
//        if (host.messageNotReadCount > 0) {
//            connectStr = [NSString stringWithFormat:@"健康吧(%ld)",(long)host.messageNotReadCount];
//        }else{
//            connectStr = @"健康吧";
//        }
        connectStr = @"健康吧";
        
    }else if(connectState == isTimeOut){
        connectStr = @"未连接";
    }else if (connectState == isDisConnect){
        connectStr = @"连接中...";
    }else if(connectState == isSync){
        connectStr = @"收取中...";
    }
    self.tabBarController.navigationItem.title = connectStr;
}
#pragma mark ------------
#pragma mark - 创建表格数据源
-(void)createPHGroupChatTableViewDataSourceMainArray{
    
    
    //初始化数组
    if (!self.PHGroupChatTableViewDataSourceMainArray) {
        self.PHGroupChatTableViewDataSourceMainArray = [[NSMutableArray alloc]init];
    }
    //清空数据
    [self.PHGroupChatTableViewDataSourceMainArray removeAllObjects];
    
    //从数据库塞入数据
    //1.医院公共号 (当做一个好友的聚合)
    //1.1 从消息数据库中获取类型是 医院好友的 消息的最后一条的消息
    SOneForOneMessageDB *soneForoneMsgDb = [[SOneForOneMessageDB alloc]init];
    OneForOneMessage * message = [soneForoneMsgDb selectLastMessageAboutMemberType:MemberFriendTypeHospital WithSelectId:0 WithContantUid:host.memberId];
    //1.2 构造一个医院公共号类 将消息的内容添加过来
    HospitalAggregation *hpAggClass = [[HospitalAggregation alloc]initWithLastMessage:message];
    [self.PHGroupChatTableViewDataSourceMainArray addObject:hpAggClass];
    
    //2.群助手 (群的集合)
    //2.1 从所有群组数据中 N个群含有未读消息 如果N>0 显示N个群有未读消息 否则显示最后一条群消息的数据
    SGroupMessageDB *sgroupMessageDb = [[SGroupMessageDB alloc]init];
    NSInteger notReadCount = [sgroupMessageDb selectNotReadMessageCountWithContactUid:host.memberId];
    GroupHelpAggregation * groupAggClass;
    if (notReadCount>0) {
        //2.2 构造群组聚合类
        groupAggClass = [[GroupHelpAggregation alloc]initWithNotReadCount:notReadCount];
    }else{
        GroupMessage *groupMessage = [sgroupMessageDb selectLastGroupMessageInAllGroupWithHostId:host.memberId];
        groupAggClass = [[GroupHelpAggregation alloc]initWithLastGroupMessage:groupMessage];
    }
    [self.PHGroupChatTableViewDataSourceMainArray addObject:groupAggClass];
    
    
    
    //3.下方都是私聊的集合
    //3.1 获取会话中（isSession = 1） 的私聊人员添加到列表
    SFirendDB * sfirenddb = [[SFirendDB alloc]init];
    NSArray * chatingMemberArray = [sfirenddb selectSessionUserWithoutHospitalWithBelongUid:host.memberId];
    [self.PHGroupChatTableViewDataSourceMainArray addObjectsFromArray:chatingMemberArray];
    
    //4.消息通知集合
    SNotificationMessage * snotifiMsgDB = [[SNotificationMessage alloc]init];
    NSArray * notifiMsgArray = [snotifiMsgDB selectAllNoticationMessageWithHostId:host.memberId MessageCode:0 ResultCount:10];
    [self.PHGroupChatTableViewDataSourceMainArray addObjectsFromArray:notifiMsgArray];
    [self.tableView reloadData];
}
#pragma mark - 创建tableview委托以及数据塞入
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.PHGroupChatTableViewDataSourceMainArray.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    GroupIndexTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifierGroupMainCell];
    if (cell == nil) {
        cell = [[GroupIndexTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifierGroupMainCell];
    }
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        @autoreleasepool {
            //Data processing
            id inCellMember = [self.PHGroupChatTableViewDataSourceMainArray objectAtIndex:indexPath.row];
            dispatch_async(dispatch_get_main_queue(), ^{
                //Update Interface
                if ([inCellMember isKindOfClass:[Member class]]) {
                    [cell setUpCellWithMember:inCellMember];
                }
                
                if ([inCellMember isKindOfClass:[HospitalAggregation class]]) {
                    [cell setUpCellWithHospitalsAggregation:inCellMember];
                }
                
                if ([inCellMember isKindOfClass:[GroupHelpAggregation class]]) {
                    [cell setUpCellWithGroupsAggregation:inCellMember];
                }
                if ([inCellMember isKindOfClass:[NotificationMessage class]]) {
                    [cell setUpCellWithNotificaion:inCellMember];
                }
            });
        }
    });
    

    return cell;
}
//- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
//    C1 *cell = (C1 *)self.prototypeCell;
//    cell.t.text = [self.tableData objectAtIndex:indexPath.row];
//    CGSize size = [cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];
//    NSLog(@"h=%f", size.height + 1);
//    return 1  + size.height;
//}
-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    id inCellmember = [self.PHGroupChatTableViewDataSourceMainArray objectAtIndex:indexPath.row];
    if (inCellmember != nil) {
        if ([inCellmember isKindOfClass:[GroupHelpAggregation class]]){
//            GroupHelpAggregation *groupAggr = (GroupHelpAggregation *)inCellmember;
            GroupHelperIndexViewController *groupHelperVC = [[GroupHelperIndexViewController alloc]init];
            [self.navigationController pushViewController:groupHelperVC animated:YES];
            //推入群组列表界面
        }else if ([inCellmember isKindOfClass:[HospitalAggregation class]]){
            HospitalAggregation *hospitalAggr = (HospitalAggregation *)inCellmember;
            //推入医院号列表界面
        }else if ([inCellmember isKindOfClass:[NotificationMessage class]]){
            NotificationMessage *notifiMsg = (NotificationMessage *)inCellmember;
            //推入消息列表界面
        }else if ([inCellmember isKindOfClass:[Member class]]){
            Member * oneMember = (Member *)inCellmember;
            PrivateChatViewViewController *privateVC = [[PrivateChatViewViewController alloc]initWithMember:oneMember WithHostMember:host];
            oneMember.chatVC = privateVC;
            [self.navigationController pushViewController:privateVC animated:YES];
            //推入私聊对话界面
        }
    }
}
- (CGFloat)tableView:(UITableView *)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath *)indexPath{
    return UITableViewAutomaticDimension;
}
- ( CGFloat )tableView:( UITableView  *)tableView heightForRowAtIndexPath:( NSIndexPath  *)indexPath
{
    return   65 ;
}

#pragma mark - 右上角添加按钮 点击
-(void)phChatRightTopAddBarBtnItemClick{
    //推入添加用户医院等界面
    NSLog(@"phChatRightTopAddBarBtnItemClick add view");
    PHChatHomeAddDetailIndexViewController *phchataddVC = [[PHChatHomeAddDetailIndexViewController alloc]init];
    [self.navigationController pushViewController:phchataddVC animated:YES];
}
-(void)groupHomeTableViewReloadData{
    [self.tableView reloadData];
}
/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/


@end

