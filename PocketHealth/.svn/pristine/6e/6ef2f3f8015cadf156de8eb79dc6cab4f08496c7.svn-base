//
//  PHDoctorAttantionListViewController.m
//  PocketHealth
//
//  Created by macmini on 15-1-17.
//  Copyright (c) 2015年 YiLiao. All rights reserved.
//

#import "PHDoctorAttantionListViewController.h"
#import "CalculateViewFrame.h"
#import "PHAttentionDoctorTableViewCell.h"
#import "PHGetMemberInfoManager.h"
#import "Member.h"

static NSString *cellIdentify = @"AttentionDoctorCell";
@interface PHDoctorAttantionListViewController ()<UIScrollViewDelegate,UISearchBarDelegate,UITableViewDelegate,UITableViewDataSource>
{
    NSMutableArray *doctorList;
    NSMutableArray *filterDoctorList;
}
@property(nonatomic, strong) UITableView *tableView;
@property(nonatomic, strong) UISearchBar *searchBar;
@end

@implementation PHDoctorAttantionListViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    _searchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0, 0, [UIScreen mainScreen].bounds.size.width, 44.0f)];
    [_searchBar setPlaceholder:@"搜索"];
    _searchBar.delegate = self;
    [self.view addSubview:_searchBar];
    CGRect frame = [CalculateViewFrame viewFrame:self.navigationController withTabBarController:self.tabBarController];
    _tableView = [[UITableView alloc] initWithFrame:CGRectMake(frame.origin.x, frame.origin.y + _searchBar.frame.size.height, frame.size.width, frame.size.height - _searchBar.frame.size.height)];
    _tableView.delegate = self;
    _tableView.dataSource = self;
    [self.view addSubview:_tableView];
    [_tableView registerNib:[UINib nibWithNibName:@"PHAttentionDoctorTableViewCell" bundle:nil] forCellReuseIdentifier:cellIdentify];
    [self initlizedDoctorList];
}

-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self.navigationItem setTitle:@"医生"];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)initlizedDoctorList
{
    [[PHGetMemberInfoManager defaultManager] requestFriendListWithMemberType:MemberUserTypeDoctor CallDoneBack:^(AFHTTPRequestOperation *operation, id responseObject) {
        NSDictionary *dic = (NSDictionary *)responseObject;
        NSInteger code = [[dic objectForKey:@"Code"] integerValue];
        if (code == 1) {
            NSArray *resultArr = [dic objectForKey:@"Result"];
            doctorList = [[NSMutableArray alloc] init];
            for (NSDictionary *m in resultArr) {
                @try {
                    Member *member = [[Member alloc] init];
                    member.memberId = [[m objectForKey:@"Userid"] longLongValue];
                    member.nickName = [m objectForKey:@"Nickname"];
                    member.headImage = [NSString stringWithFormat:@"%@%@",ServerBaseURL,[m objectForKey:@"Headimg"]];
                    member.realName = [m objectForKey:@"Usertruename"];
                    member.location = [m objectForKey:@"Userlocation"];
                    member.diId = [[m objectForKey:@"Diid"] integerValue];
                    member.diJobTitle = [m objectForKey:@"Dijobtitle"];
                    member.diDepartment = [m objectForKey:@"Didepartments"];
                    [doctorList addObject:member];
                }
                @catch (NSException *exception) {
                    
                }
            }
            if (doctorList.count > 0) {
                filterDoctorList = [NSMutableArray arrayWithArray:doctorList];
            }else{
                filterDoctorList = [[NSMutableArray alloc] init];
            }
            [_tableView reloadData];
        }else{
            
        }
    } CallErrorBack:^(AFHTTPRequestOperation *operation, NSError *error) {
        
    }];
}


-(void)filterDoctorWithSearchText:(NSString *)searchText
{
    if (filterDoctorList == nil) {
        filterDoctorList = [[NSMutableArray alloc] init];
    }else{
        [filterDoctorList removeAllObjects];
    }
    
    if ((searchText == nil) || (searchText.length == 0)) {
        [filterDoctorList addObjectsFromArray:doctorList];
    }else{
        NSString *likeStr = [NSString stringWithFormat:@"*%@*",searchText];
        NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF.realName LIKE[cd] %@",likeStr];
        NSArray *array = [doctorList filteredArrayUsingPredicate:predicate];
        if ((array == nil) || (array.count == 0)) {
            return;
        }
        [filterDoctorList addObjectsFromArray:array];
    }
    [_tableView reloadData];
}

#pragma -mark searchBarDelegate
- (void)searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)searchText
{
    [self performSelector:@selector(filterDoctorWithSearchText:) withObject:searchText];
}

- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar
{
    [searchBar resignFirstResponder];
}

#pragma -mark TableViewDelegate
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPat
{
    return 98.0f;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return filterDoctorList.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    PHAttentionDoctorTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentify];
    
    Member *selectMember = [filterDoctorList objectAtIndex:indexPath.row];
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        @autoreleasepool {
            //Data processing
            dispatch_async(dispatch_get_main_queue(), ^{
                //Update Interface
                [cell setupWithMember:selectMember];
            });
        }
    });
    return cell;
}

#pragma -mark scrollViewDelegate
- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView
{
    if ([_searchBar becomeFirstResponder]) {
        [_searchBar resignFirstResponder];
    }
}

@end
